@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<Modal Title="@Tips"
       @bind-Visible="Visible"
       OnOk="HandleOk"
       OnCancel="HandleCancel"
       OkText=@("确认")
       CancelText=@("取消")
       Width="400"
       Closable="@(!IsForceChange )"
       MaskClosable="@( !IsForceChange )">

    <div style="margin-bottom: 16px; display: flex; align-items: center;">
        <label style="width: 100px; margin-right: 8px;">
            旧密码 <span style="color:red;">*</span>
        </label>
        <InputPassword @bind-Value="oldPassword"
                       Placeholder="请输入旧密码"
                       Size="@InputSize.Default"
                       style="flex: 1;" />
    </div>

    <div style="margin-bottom: 16px; display: flex; align-items: center;">
        <label style="width: 100px; margin-right: 8px;">
            新密码 <span style="color:red;">*</span>
        </label>
        <InputPassword @bind-Value="newPassword1"
                       Placeholder="请输入新密码"
                       Size="@InputSize.Default"
                       style="flex: 1;" />
    </div>

    <div style="margin-bottom: 16px; display: flex; align-items: center;">
        <label style="width: 100px; margin-right: 8px;">
            确认密码 <span style="color:red;">*</span>
        </label>
        <InputPassword @bind-Value="newPassword2"
                       Placeholder="请再次输入密码"
                       Size="@InputSize.Default"
                       style="flex: 1;" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="color: red; margin-left: 100px;">@errorMessage</div>
    }
</Modal>

@code {

    [Inject] public MessageService MessageService { get; set; }

    [Inject] public UserService UserService { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public bool IsForceChange { get; set; } = false;

    [Parameter]
    public string Tips { get; set; }

    private string oldPassword = "";
    private string newPassword1 = "";
    private string newPassword2 = "";
    private string errorMessage = "";

    private async Task HandleOk()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(oldPassword)) throw new Exception("旧密码不能为空");

            if (string.IsNullOrWhiteSpace(newPassword1) || string.IsNullOrWhiteSpace(newPassword2))
            {
                throw new Exception("新密码不能为空");
            }
            if (newPassword1 != newPassword2)
            {
                throw new Exception("两次输入的密码不一致");
            }
            if (newPassword1.Length < 8)
            {
                throw new Exception("密码长度不能小于8");
            }
            if (!Utility.IsValidPassword(newPassword1))
            {
                throw new Exception("密码必须包含大小写字母和数字");
            }
            if (newPassword1.Length >= 32)
            {
                throw new Exception("密码长度不能大于32位");
            }

            BsUser old = BsConfig.Users.Find(f => f.UserId == UserService.UserId);
            var json = JsonSerializer.Serialize(old);
            BsUser user = JsonSerializer.Deserialize<BsUser>(json);
            user.Password = Utility.MD5(newPassword1);
            user.LastChangePwd = DateTime.Now;
            string logType = user.UserId == 0 ? "添加用户" : "编辑用户";
            BsConfig.AddOrUpdateUser(user);

            BsOptLog log = new BsOptLog()
                {
                    OptType = logType,
                    UserId = this.UserService.UserId,
                    UserName = this.UserService.UserName,
                    OptObjId = user.UserId,
                    Summary = $"{logType}用户{user.UserName}-{user.UserId}"
                };
            BsConfig.AddOptLog(log);


            // 成功后关闭弹窗
            Visible = false;
            await VisibleChanged.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            this.errorMessage = ex.Message;
            // 出错时不关闭弹窗
            Visible = true;
            await VisibleChanged.InvokeAsync(true);
        }
    }

    private async Task HandleCancel()
    {
        if (!IsForceChange)
        {
            Visible = false;
            await VisibleChanged.InvokeAsync(false);
        }
        else
        {
            this.errorMessage = "请先修改密码";
            Visible = true;
            await VisibleChanged.InvokeAsync(true);
        }
        // 如果是强制修改密码，什么都不做（不关闭弹窗）
    }
}