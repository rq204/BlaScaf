@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager nav

<Layout Style="min-height: 100vh">
    <Sider Collapsible="true" @bind-Collapsed="collapsed" Width="200" Theme="SiderTheme.Light">
        <div style="height: 54px; display: flex; align-items: center; justify-content: center;">
            @if (collapsed)
            {
                <img src="/images/logo_fold.png" style="height: 50px; width: 80px; object-fit: contain;" />
            }
            else
            {
                <img src="/images/logo_unfold.png" style="height: 50px; width: 180px; object-fit: contain;" />
            }
        </div>
        <NavMenu />
    </Sider>

    <Layout>
        <Header style="background: #fff; padding: 0 16px; display: flex; justify-content: space-between; align-items: center; height: 50px;">
            <Space Align="SpaceAlign.Center" Size="SpaceSize.Middle" >
                <Icon Class="action" Type="@(collapsed ? "menu-unfold" : "menu-fold")" OnClick="ToggleSidebar" />
                <Text>  </Text>
                <Text>@PageTitle</Text>
            </Space>
            <Space Align="SpaceAlign.Center" Size="SpaceSize.Middle" Style="height: 100%; display: flex; align-items: center;">
                <HeaderActions />
            </Space>
        </Header>

        <Content style="margin: 10px; background: #fff; padding: 0px; min-height: 280px">
            @Body
        </Content>
    </Layout>
</Layout>

@code {
    private bool collapsed = false;
    private string current = "home";

    private void ToggleSidebar()
    {
        collapsed = !collapsed;
    }

    private void OnMenuSelect(MenuItem menuItem)
    {
        current = menuItem.Key;
        //NavigationManager.NavigateTo($"/{menuItem.Key}");
    }

    private string PageTitle = "首页";

    protected override void OnInitialized()
    {
        nav.LocationChanged += OnLocationChanged;
        UpdatePageTitle(nav.Uri);
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdatePageTitle(e.Location);
        StateHasChanged();
    }

    private void  UpdatePageTitle(string uri)
    {
        var relativePath = nav.ToBaseRelativePath(uri).TrimEnd('/');
        PageTitle = BsConfig.MenuItems.Find(f => f.RouterLink.Trim('/') == relativePath)?.Title;
        JS.InvokeVoidAsync("SetTitle", PageTitle);
    }

    public void Dispose()
    {
        nav.LocationChanged -= OnLocationChanged;
    }

}

