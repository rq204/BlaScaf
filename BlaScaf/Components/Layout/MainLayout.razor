@using System.Text.Json
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<style>
    .my-space .ant-space-item {
        display: flex;
        align-items: center;
    }
</style>
<Layout Style="min-height: 100vh">
    <Sider Collapsible="true" @bind-Collapsed="collapsed" Width="200" Theme="SiderTheme.Light">
        <div style="height: 54px; display: flex; align-items: center; justify-content: center;">
            @if (collapsed)
            {
                <img src="/images/logo_fold.png" style="height: 50px; width: 80px; object-fit: contain;" />
            }
            else
            {
                <img src="/images/logo_unfold.png" style="height: 50px; width: 180px; object-fit: contain;" />
            }
        </div>
        <NavMenu />
    </Sider>

    <Layout>
        <Header style="background: #fff; padding: 0 16px; display: flex; justify-content: space-between; align-items: center; height: 50px;">
            <Space Align="SpaceAlign.Center" Size="SpaceSize.Small">
                <SpaceItem>
                    <Icon Class="action" Type="@(collapsed ? "menu-unfold" : "menu-fold")" OnClick="ToggleSidebar" />
                </SpaceItem>
                <SpaceItem>
                    <Text>@PageTitle</Text>
                </SpaceItem>
            </Space>
            <Space Align="SpaceAlign.Center" Size="SpaceSize.Middle" Style="height: 100%; display: flex; align-items: center;" Class="my-space">
                @foreach (var fragment in this.fragments)
                {
                    <SpaceItem>
                        @fragment
                    </SpaceItem>
                }
                <SpaceItem>
                    <BlaScaf.Components.Shared.FullScreenToggle />
                </SpaceItem>
                <SpaceItem>
                    <BlaScaf.Components.Shared.UserProfileMenu />
                </SpaceItem>
            </Space>
        </Header>

        <Content style="margin: 10px; background: #fff; padding: 0px; min-height: 280px">
            @Body
        </Content>
    </Layout>
</Layout>
<script>
    window.keepAlive = (timeoutMinutes , dotNetObj) => {
        const KEEPALIVE_URL = '/bsapi/keepalive';
        const STORAGE_KEY = 'keepalive';
        const CHECK_INTERVAL = timeoutMinutes / 2 * 60 * 1000; // 检查时间为 超时时间一半多6秒
        const ACTIVITY_THRESHOLD = timeoutMinutes/ 2 * 60 * 1000; // 用户活跃时间阈值为 超时时间一半
        const TIMEOUT_MS = timeoutMinutes * 60 * 1000;

        let lastActivity = Date.now();
        let lastRequest = parseInt(localStorage.getItem(STORAGE_KEY) || '0');

        // 记录用户最近操作时间
        const recordActivity = () => {
            lastActivity = Date.now();
        };

        ['click', 'mousemove', 'keydown', 'scroll'].forEach(event =>
            document.addEventListener(event, recordActivity, { passive: true })
        );

        // 跨标签页同步 lastRequest
        window.addEventListener('storage', (e) => {
            if (e.key === STORAGE_KEY && e.newValue) {
                lastRequest = parseInt(e.newValue);
            }
        });

        // 核心逻辑：是否触发保活请求
        const tryKeepAlive = async () => {
            const now = Date.now();
            const userActiveRecently = now - lastActivity < ACTIVITY_THRESHOLD;
            const timeoutExceeded = now - lastRequest > TIMEOUT_MS;

            if (userActiveRecently || timeoutExceeded) {
                try {
                    const response = await fetch(KEEPALIVE_URL, {
                        method: 'POST',
                        credentials: 'include'
                    });

                    if (response.status === 401) {
                        clearInterval(intervalId);
                         if (dotNetObj && dotNetObj.invokeMethodAsync) {
                                await dotNetObj.invokeMethodAsync("OnTimeOut");
                            }
                        return;
                    }

                    lastRequest = Date.now();
                    localStorage.setItem(STORAGE_KEY, lastRequest.toString());
                } catch (err) {
                    console.warn('Keep-alive failed:', err);
                }
            }
        };

        // 间隔时间触发一次检查
        let intervalId = setInterval(tryKeepAlive, CHECK_INTERVAL);
    };
</script>
