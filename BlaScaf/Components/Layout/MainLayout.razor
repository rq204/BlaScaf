@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager nav

<style>
    .my-space .ant-space-item {
        display: flex;
        align-items: center;
    }
</style>
<Layout Style="min-height: 100vh">
    <Sider Collapsible="true" @bind-Collapsed="collapsed" Width="200" Theme="SiderTheme.Light">
        <div style="height: 54px; display: flex; align-items: center; justify-content: center;">
            @if (collapsed)
            {
                <img src="/images/logo_fold.png" style="height: 50px; width: 80px; object-fit: contain;" />
            }
            else
            {
                <img src="/images/logo_unfold.png" style="height: 50px; width: 180px; object-fit: contain;" />
            }
        </div>
        <NavMenu />
    </Sider>

    <Layout>
        <Header style="background: #fff; padding: 0 16px; display: flex; justify-content: space-between; align-items: center; height: 50px;">
            <Space Align="SpaceAlign.Center" Size="SpaceSize.Small">
                <SpaceItem>
                    <Icon Class="action" Type="@(collapsed ? "menu-unfold" : "menu-fold")" OnClick="ToggleSidebar" />
                </SpaceItem>
                <SpaceItem>
                    <Text>@PageTitle</Text>
                </SpaceItem>
            </Space>
            <Space Align="SpaceAlign.Center" Size="SpaceSize.Middle" Style="height: 100%; display: flex; align-items: center;" Class="my-space">
                @foreach (var fragment in BsConfig.HeaderFragments)
                {
                    <SpaceItem>
                        @fragment
                    </SpaceItem>
                }
                <SpaceItem>
                    <BlaScaf.Components.Shared.FullScreenToggle />
                </SpaceItem>
                <SpaceItem>
                    <BlaScaf.Components.Shared.UserProfileMenu />
                </SpaceItem>
            </Space>
        </Header>

        <Content style="margin: 10px; background: #fff; padding: 0px; min-height: 280px">
            @Body
        </Content>
    </Layout>
</Layout>
@code {
    private bool collapsed = false;

    @inject AuthenticationStateProvider AuthenticationStateProvider
    [Inject] private NavigationManager Navigation { get; set; }
  

    // private bool _checkedAuth = false;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender && !_checkedAuth)
    //     {
    //         _checkedAuth = true;

    //         var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //         var user = authState.User;

    //         // 当前路径是否为 /login
    //         var currentUri = Navigation.ToBaseRelativePath(Navigation.Uri).Trim('/');
    //         bool isOnLoginPage = string.Equals(currentUri, "login", StringComparison.OrdinalIgnoreCase);

    //         if (!user.Identity?.IsAuthenticated ?? true)
    //         {
    //             if (!isOnLoginPage)
    //             {
    //                 Navigation.NavigateTo("/login", true);
    //             }
    //         }
    //     }
    // }


    private void ToggleSidebar()
    {
        collapsed = !collapsed;
    }

    private string PageTitle = "首页";

    protected override void OnInitialized()
    {
        nav.LocationChanged += OnLocationChanged;
        UpdatePageTitle(nav.Uri);
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdatePageTitle(e.Location);
        StateHasChanged();
    }

    private void UpdatePageTitle(string uri)
    {
        var relativePath = nav.ToBaseRelativePath(uri).TrimEnd('/');
        PageTitle = BsConfig.MenuItems.Find(f => f.RouterLink.Trim('/') == relativePath)?.Title;
    }

    public void Dispose()
    {
        nav.LocationChanged -= OnLocationChanged;
    }

}

